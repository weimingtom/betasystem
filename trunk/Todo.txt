
○空で作るか.
	→ひと通り作ったが、これ結構作業デカイなぁ。








○自分の攻撃
	JudgeAttackMiss(player,enemy);
	Attack(player,enemy);
	Pray(enemy);
	Away();

○敵の攻撃
	JudgeAttackMiss(enemy,attack);
	Attack(enemy,attack);

○終了判定（敵全滅、味方全滅）

○結果を表示
	→処理するごとにログプリンターへ入れていく？

○遷移先を保持しておく必要はあるかもなぁ。
	・戦闘継続へ
	・戦闘終了へ
	・ゲームオーバーへ

○シーケンスをスタックするシステムは、適切じゃないんじゃね？例えば戦闘が終わってゲームオーバーに行くとき面倒だわ。
	→ポーズするだけにするか。

○戦闘関係の判定処理を別ソースにまとめようかな。
	→BattleFunc
		・ダメージ計算

○コマンド処理実装

○ドロップ抽選





●次やる
●後でやる。


	○フィールド画面を作る。
		・進む
		・祈る(時間経過してしまう（夜が来る）)
		・装備
		
		・ステージ情報
			・背景
			・出現敵
			・出現アイテム

		・モンスター抽選

	○パラメータ関連
		・属性算出

	○ドロップ周り
		・色の特別抽選	○アイテムドロップ処理を作る
		//! ステージパラメータ.
		struct StageParam
		{
			//ドロップ率とか。
		};

//改善
//----------------------------


//作業履歴
2013年10月6日

○svnインスコ
	0:29:35

○vs2010落とす
	→いれた。

○リポジトリ落としてくる。


○ビルドする。
	→あれ、vsがたちあがらない。
		→あぁ、vsバージョンが合ってないのか。コンバートしてみた。
	
	→一応起動した。
		→何か警告出る

	→クソめんどくせーなぁ2012でやってみるか。
		→2008のslnだったわ。

○ビルドする。
	→2008まだ生きてるらしいので入れる。
		
○実行
	→できた。

○StateManagerのnew_Stateを無くしたい（分かり辛いと思う。）
	1:51:46
	おｋ



2013年10月6日

○まずはデバッグトップを作るか…
	→選択して、Stateを切り替えるようにする。


○スロットのやつ持ってくる。
	→ログプリンターを出力しよう。
		→いや、それすら必要ないのか…printfでいいじゃん…

○スロットのやつ持ってくる。
	→ソースコード移植
	→した。
		12:03:53

○LogPrinterへの出力
	1:20:50
	1:28:35

○winmergeインスコ
	1:42:18



○ログのリファクタリング
	1:43:24

○ImageLoaderの整理
	2:14:02


○画像描画の整理

○子役の画像作成。
	21:50:35
○子役の画像の表示。
	22:34:52


○リストに合わせて表示する。
	23:33:51
○アバターの表示
	→ソースがリバートしてふっかつできねぇ。
		→力づく
			1:03:02

	→コンパイル通す。


○パレットカラー変更の実装
	・パレットカラーテストStateを作る
		1:36:50


○パレットカラー変更の実装
	・画像をパレットカラーのフォーマットにする
		1:36:56
			した。
○パレットカラー変更の実装
	・SoftImageHandleを保持するようにする
		2:12:02
	
	・表示までオワタ。

○アイテムの基礎をつくる
	23:55:34
	0:09:22




○アイテム持たせる

//プレイヤー情報
struct Player
{
	//! 装備.
	Equip mEquip[Equip_Num];
	
	//! 所持アイテム.
	
};

○装備テストステートを作る
	EquipTestState


○アイテム持たせる

○プレイヤーに装備枠を作る

○装備処理を入れる

○装備に準じたアバターの表示を行う.
	まず普通に描画
		0:05:12

○装備に準じたアバターの表示を行う.
	→髪の毛の色をランダムでつける。	2:01:47


○バトルステート作る
	1:22:36

○プレイヤー表示
	いらない。


○コマンド表示
	1:55:21

○敵実装
	→param作る



○敵パラメータの表示
	→した。

○avaterをstateに持たせる



○ちょっちバケット整理
	0:08:07


○2013年10月16日

○State的作る
	State_SelectAction,		//行動選択.
	State_ProcAction,		//行動計算.
	State_DrawAction,		//行動の表示（見た目を再生）.
	State_TurnEnd,			//ターン終了.

